function [layer]=layerInit(frame1,frame2)
[a,b,c]=size(frame2);

% max, the max value in pixel history.
% min, the min value in pixel history.
% mask1=(frame<max+gap))&(frame>(min-gap))
% gap, the gap between layer.mean and pixel.
% mean, the mean value in pixel history.
% rangeratio, the ratio for range=(max-min+2*gap)
% mask2=(frame-mean)>(max-min+2*gap).*rangeratio
% fc, foreground counter, update by formula fc=fc+mask;
% fmask=fc>3 
% bc, background counter. update by formula bc=bc+(~mask);
% bmask=bc>3, mask mean foregroundmask, bmask mean background mask;
% dc, dynamic background counter, update by formula dc(fc>10)=1;
% dc(bc>5)=0;
% pminSetMean, smaller pixel set's mean. (pixel-mean)>(10,10,10)
% pmaxSetMean, bigger pixel set's mean.  (mean-pixel)>(10,10,10)
% pminSetMean and pmaxSetMean wanted to save the pixel history, then
% count a better vector for 'fitting line' than mean.
% pminnum, the number of smaller pixel set.
% pmaxnum, the number of bigger pixel set.
% to use pmaxSetMean and pminSetMean, we need pminnum>0 and pmaxnum>0
% vecgap, the vector gap for (pmaxSetMean,pminSetMean) and mean 
% mask3=cross(frame,vector)>vecgap
% minvecgap, the minimal vecgap.
% mmgnoise, maxmingap noise for mask1
% mmrnoise, maxminratio noise for mask2
% vecnoise, vector noise for mask3
% gapinc, the increase step for gap update. gap=gap+dif+gapinc;
% bw1, bw1 is the mask history, update by bw1=mask

layer=struct(...
'max',zeros(a,b,c,'double'),...
'min',zeros(a,b,c,'double'),...
'gap',ones(a,b,c,'double')*5,...
'mean',zeros(a,b,c,'double'),...
'rangeratio',zeros(a,b,c,'double'),...
'fc',zeros(a,b,'uint32'),...
'bc',ones(a,b,'uint32'),...
'dc',zeros(a,b,'uint32'),...
'pminSetMean',zeros(a,b,c,'double'),...
'pmaxSetMean',zeros(a,b,c,'double'),...
'pminnum',zeros(a,b,'uint32'),...
'pmaxnum',zeros(a,b,'uint32'),...
'vecgap',ones(a,b,'double')*0.01,...
'minvecgap',0.01,...
'mmgnoise',zeros(1,2,'double'),...
'mmrnoise',zeros(1,2,'double'),...
'vecnoise',zeros(1,2,'double'),...
'gapinc',5,...
'minarea',a*b/1000,...
'bw1',false(a,b),...
'frameNum',1);

if(c==1)
    error('expect rgb pic, but input is gray pic')
else
    layer.max=double(frame1);
    layer.min=double(frame1);
    layer.mean=double(frame1);
    layer=layerUpdate_yzbx(layer,frame2);
end

